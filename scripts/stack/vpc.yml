---
AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys Vpc 

Parameters:
  VPCName:
    Type: String
  BucketName:
    Type: String
    Default: AWS::NoValue
  PrivateSubnets:
    Type: String
    Default: false

Conditions:
  HasBucketName: !Not
    - !Equals
      - !Ref BucketName
      - AWS::NoValue
  CreatePrivateSubnets: !Not
    - !Equals
      - !Ref PrivateSubnets
      - false

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
       - Key: Name
         Value: !Ref VPCName
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateSubnets
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateSubnets
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateSubnets
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}c'
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
  PrivateSubnetsNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: CreatePrivateSubnets
    Properties:
      AllocationId: !GetAtt PrivateSubnetsNatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  PrivateSubnetsNatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: CreatePrivateSubnets
    Properties:
      Domain: vpc
  PrivateSubnetsNatGatewayRoute:
    Type: AWS::EC2::Route
    Condition: CreatePrivateSubnets
    Properties:
      RouteTableId:
        !Ref PrivateSubnetsRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        !Ref PrivateSubnetsNatGateway
  PrivateSubnetsRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreatePrivateSubnets
    Properties:
      VpcId: !Ref VPC


  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}c'
      CidrBlock: 10.0.5.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  InternetGtw:
    Type: AWS::EC2::InternetGateway
  InternetGtwVPCAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGtw
      VpcId: !Ref VPC
  PublicSubnetsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId:
          !Ref PublicSubnetsRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
          !Ref InternetGtw
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      SubnetId: !Ref PublicSubnet3
  PrivateSubnet1RouteTableAssociation:
    Condition: CreatePrivateSubnets
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetsRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateSubnetsRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateSubnetsRouteTable
      SubnetId: !Ref PrivateSubnet3
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: HasBucketName
    Properties:
      RouteTableIds:
        - !Ref PublicSubnetsRouteTable
        - !If [CreatePrivateSubnets, !Ref PrivateSubnetsRouteTable, !Ref AWS::NoValue]
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC

Outputs:
  Subnets:
    Value: !Join
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
        - !If [CreatePrivateSubnets, !Ref PrivateSubnet1, !Ref AWS::NoValue]
        - !If [CreatePrivateSubnets, !Ref PrivateSubnet2, !Ref AWS::NoValue]
        - !If [CreatePrivateSubnets, !Ref PrivateSubnet3, !Ref AWS::NoValue]
  PublicSubnet1ID:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1ID"
  PublicSubnet2ID:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2ID"
  PublicSubnet3ID:
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet3ID"
  PrivateSubnet1ID:
    Condition: CreatePrivateSubnets
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1ID"
  PrivateSubnet2ID:
    Condition: CreatePrivateSubnets
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2ID"
  PrivateSubnet3ID:
    Condition: CreatePrivateSubnets
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet3ID"
  VPCID:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  VPCCIDR:
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub "${AWS::StackName}-VPCCIDR"
